swagger: "2.0"
info:
  description: "OVE (Open Visualisation Environment) is an open-source software stack, designed to be used in large scale visualisation environments like the [Imperial College](http://www.imperial.ac.uk) [Data Science Institute's](http://www.imperial.ac.uk/data-science/) [Data Observatory](http://www.imperial.ac.uk/data-science/data-observatory/). The OVE Core provides functionality for CRUD operations on sections, groups and obtaining details of spaces."
  version: "@VERSION"
  title: "OVE Core"
  contact:
    email: "@AUTHOR"
  license:
    name: "@LICENSE License"
    url: "https://raw.githubusercontent.com/ove/ove/master/LICENSE"
basePath: "/"
tags:
- name: "spaces"
  description: "Details related to spaces"
- name: "sections"
  description: "Operations on all sections"
- name: "section"
  description: "Operations on an individual section"
- name: "group"
  description: "Operations on an individual section group"
- name: "other"
  description: "Other operations"
schemes:
- "http"
paths:
  /persistence:
    post:
      tags:
      - "other"
      summary: "Sets the URL of the persistence provider"
      parameters:
      - name: "body"
        in: "body"
        schema:
          type: "object"
          url:
            source:
              type: "string"
              description: "URL of the persistence provider"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
        400:
          description: "bad request"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Returns an error message 'invalid request' if the required parameter 'url' was not provided/"
    delete:
      tags:
      - "common operations"
      summary: "Removes the URL of the persistence provider, if it exists"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
  /spaces:
    get:
      tags:
      - "spaces"
      summary: "Reads details of OVE spaces"
      description: "This will return details of all spaces if no query parameters were provided. This will return a filtered list of spaces if a section id was provided and will return an empty array if a section by the given id does not exist."
      produces:
      - "application/json"
      parameters:
      - name: "oveSectionId"
        in: "query"
        type: "integer"
        format: "int32"
        description: "Section ID"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Spaces"
  /spaces/{name}/geometry:
    get:
      tags:
      - "spaces"
      summary: "Reads geometry of a named space"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        type: "string"
        description: "Name of space"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Space%20Geometry"
        400:
          description: "bad request"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Returns an error message 'invalid space' if the name of the space was not provided or not found."
  /sections:
    get:
      tags:
      - "sections"
      summary: "Reads details of multiple sections within a group or space"
      description: "Will return an empty array if no sections exist within the provided group, space or geometry."
      produces:
      - "application/json"
      parameters:
      - name: "space"
        in: "query"
        type: "string"
        description: "Name of space"
        required: false
      - name: "groupId"
        in: "query"
        type: "integer"
        format: "int32"
        description: "Group ID"
        required: false
      - name: "geometry"
        in: "query"
        type: "string"
        example: "x,y,w,h"
        description: "Geometry used to filter result"
        required: false
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Section%20Metadata"
    post:
      tags:
      - "sections"
      summary: "Updates sections"
      description: "Each section will be transformed (resized or moved within a space, or moved to a new space) by invoking the corresponding update operation. This operation will be limited to a subset of sections if a group id or a space was provided."
      produces:
      - "application/json"
      parameters:
      - name: "space"
        in: "query"
        type: "string"
        description: "Name of space"
        required: false
      - name: "groupId"
        in: "query"
        type: "integer"
        format: "int32"
        description: "Group ID"
        required: false
      - in: "body"
        name: "body"
        description: "Transform operation"
        schema:
          $ref: "#/definitions/Transformation"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
        400:
          description: "bad request"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Returns an error message 'invalid space' if the name of the space was not found. Returns an error message 'invalid dimensions' if the dimensions for the operations were not properly provided or if the section does not fit within its space after the transformation."
    delete:
      tags:
      - "sections"
      summary: "Deletes sections"
      description: "Each application associated with each existing section will be discarded by invoking the corresponding flush operation on them. This operation will be limited to subset of sections if a group id or a space was provided."
      produces:
      - "application/json"
      parameters:
      - name: "space"
        in: "query"
        type: "string"
        description: "Name of space"
        required: false
      - name: "groupId"
        in: "query"
        type: "integer"
        format: "int32"
        description: "Group ID"
        required: false
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
  /section:
    post:
      tags:
      - "section"
      summary: "Creates a section on OVE and deploys an application instance into it."
      description: "All parameters except for the load and cache parameters within the app configuration are mandatory."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Section configuration"
        required: true
        schema:
          $ref: "#/definitions/Section"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int32"
        400:
          description: "bad request"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Returns an error message 'invalid space' if the name of the space was not provided or not found. Returns an error message 'invalid dimensions' if the dimensions of the section were not properly setup. Returns an error message 'invalid app configuration' if the application configuration was not properly provided."
  /section/{id}:
    get:
      tags:
      - "section"
      summary: "Reads details of a section that has been created"
      description: "Will return an empty array if a section by the given id does not exist."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        description: "Section ID"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Section%20Metadata"
    post:
      tags:
      - "section"
      summary: "Updates a section that has been created"
      description: "Out of the parameters provided, section, x, y, w and h are optional. If these are not provided the existing values will be left unchanged. The app parameter is required, unless the intention is to remove the app from the section. The url parameter within the app configuration is mandatory but both load and cache are optional."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        description: "Section ID"
        required: true
      - in: "body"
        name: "body"
        description: "Section configuration"
        schema:
          $ref: "#/definitions/Section"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int32"
        400:
          description: "bad request"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Returns an error message 'invalid section id' if the section id was not found. Returns an error message 'invalid space' if the name of the space was not found. Returns an error message 'invalid dimensions' if the dimensions of the section were not properly provided. Returns an error message 'invalid app configuration' if the application configuration was not properly provided."
    delete:
      tags:
      - "section"
      summary: "Deletes the section with the given id"
      description: "Each application associated with each existing section will be discarded by invoking the corresponding flush operation on them."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        description: "Section ID"
        required: true      
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              ids:
                type: "array"
                items:
                  type: "integer"
                  format: "int32"
        400:
          description: "bad request"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Returns an error message 'invalid section id' if the section id was not found."
  /group:
    post:
      tags:
      - "group"
      summary: "Creates a section group on OVE."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of sections"
        required: true
        schema:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int32"
        400:
          description: "bad request"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Returns an error message 'invalid group' if the group was not an array or contained invalid section ids."
  /group/{id}:
    get:
      tags:
      - "group"
      summary: "Returns a list of sections in group"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        description: "Group ID"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int32"
    post:
      tags:
      - "group"
      summary: "Updates a list of sections in group"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        description: "Group ID"
        required: true
      - in: "body"
        name: "body"
        description: "List of sections"
        required: true
        schema:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int32"
        400:
          description: "bad request"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Returns an error message 'invalid group id' if the group id was not found."
    delete:
      tags:
      - "group"
      summary: "Deletes the group with the given id"
      description: "If there are no more non-empty groups at the end of this operation, it will reset all groups on the server."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        description: "Group ID"
        required: true      
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int32"
        400:
          description: "bad request"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                description: "Returns an error message 'invalid group id' if the group id was not found."
definitions:
  Spaces:
    type: "object"
    additionalProperties:
      type: "array"
      items:
        type: "object"
        properties:
          x:
            type: "integer"
            format: "int32"
          y:
            type: "integer"
            format: "int32"
          w:
            type: "integer"
            format: "int32"
          h:
            type: "integer"
            format: "int32"
    example:
      "LocalNine":
        -
          x: 0
          y: 1616
          w: 1440
          h: 808
        -
          x: 1440
          y: 1616
          w: 1440
          h: 808
        -
          x: 2880
          y: 1616
          w: 1440
          h: 808
        -
          x: 0
          y: 808
          w: 1440
          h: 808
        -
          x: 1440
          y: 808
          w: 1440
          h: 808
        -
          x: 2880
          y: 808
          w: 1440
          h: 808
        -
          x: 0
          y: 0
          w: 1440
          h: 808
        -
          x: 1440
          y: 0
          w: 1440
          h: 808
        -
          x: 2880
          y: 0
          w: 1440
          h: 808
  Space Geometry:
    description: "Response format, when fetching space geometry"
    type: "object"
    properties:
      w:
        type: "integer"
        format: "int32"
        example: 30720
      h:
        type: "integer"
        format: "int32"
        example: 4320
  Section:
    description: "Used when creating or updating a section"
    properties:
      app:
        type: "object"
        properties:
          url:
            type: "string"
            example: "http://localhost:8084"
          states:
            type: "object"
            properties:
              load:
                type: "object"
                example: {"url": "http://www.youtube.com/embed/XY3NP4JHXZ4"}
                description: "Accepts either a string or an application-specific state object."
              cache:
                type: "object"
                example: {"first":{"url": "http://www.youtube.com/embed/XY3NP4JHXZ4"}, "second":{"url": "http://www.youtube.com/embed/XY3NP4JHXZ4"}}
      space:
        type: "string"
        description: "Name of space"
        example: "LocalNine"
      x:
        type: "integer"
        format: "int32"
      y:
        type: "integer"
        format: "int32"
      w:
        type: "integer"
        format: "int32"
        example: 30720
      h:
        type: "integer"
        format: "int32"
        example: 4320
  Transformation:
    description: "Used when updating multiple sections"
    properties:
      scale:
        type: "object"
        properties:
          x:
            type: "integer"
            format: "int32"
          y:
            type: "integer"
            format: "int32"
      translate:
        type: "object"
        properties:
          x:
            type: "integer"
            format: "int32"
          y:
            type: "integer"
            format: "int32"
      space:
        type: "string"
        description: "Name of space"
        example: "LocalNine"
  Section Metadata:
    description: "Response format, when fetching section details"
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 0
      x:
        type: "integer"
        format: "int32"
      y:
        type: "integer"
        format: "int32"
      w:
        type: "integer"
        format: "int32"
        example: 30720
      h:
        type: "integer"
        format: "int32"
        example: 4320
      space:
        type: "string"
        example: "LocalNine"
      app:
        type: "object"
        properties:
          url:
            type: "string"
            example: "http://localhost:8084"
          state:
            type: "string"
            description: "Name of the state will only be returned if a named state was loaded."
            example: "DSI"
          opacity:
            format: "float"
            description: "Sets the transparency of an element which can be a value between 0.0 and 1.0"
            example: 0.75

externalDocs:
  description: "Find out more about OVE"
  url: "https://dsi.gitbook.io/ove"
